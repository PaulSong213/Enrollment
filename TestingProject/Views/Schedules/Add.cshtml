<div class="modal fade" id="addData" tabindex="-1" aria-labelledby="addData" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="exampleModalLabel">Add Schedule</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        
        @model EnrollmentSystem.Models.SchedulesModel

         @using(Html.BeginForm("Add", "Schedules"))
        {
            @Html.AntiForgeryToken()
                
                <div class="form-horizontal">
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            
                    <div class="form-group my-3">
                         <label for="" class="control-label">Course</label>
                        <div class="col-md-12">
                            <select class="form-select" name="courseId" id="addCourseId" aria-label="Default select example">
                            </select>
                            @Html.ValidationMessageFor(model => model.courseId, "", new { @class = "text-danger" })
                        </div>
                    </div>
            
                    <div class="form-group my-3">
                        @Html.LabelFor(model => model.year, htmlAttributes: new { @class = "control-label col-md-12 text-capitalize" })
                        <div class="col-md-12">
                            @Html.EditorFor(model => model.year, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.year, "", new { @class = "text-danger" })
                        </div>
                    </div>
            
                    <div class="form-group my-3">
                        @Html.LabelFor(model => model.section, htmlAttributes: new { @class = "control-label col-md-12 text-capitalize" })
                        <div class="col-md-12">
                            @Html.EditorFor(model => model.section, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.section, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    
                    <div class="form-group my-3">
                        @Html.LabelFor(model => model.link, htmlAttributes: new { @class = "control-label col-md-12 text-capitalize" })
                        <div class="col-md-12">
                            @Html.EditorFor(model => model.link, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.link, "", new { @class = "text-danger" })
                        </div>
                    </div>
                   
                </div>
     
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="submit" class="btn btn-success" >Add Schedule</button>
                    
      </div>
    }
    </div>
  </div>
</div>

    
<script>
    var exampleModal = document.getElementById('addData')
    exampleModal.addEventListener('show.bs.modal', function (event) {
      setTimeout(()=>{
        $('input').attr('value',   "");    
        
         var button = event.relatedTarget
         var id = button.getAttribute('data-bs-id')
        
         var item = JSON.parse(button.getAttribute('data-bs-item'));
         console.log(item);
         var addCourseSelect = document.getElementById("addCourseId");
         
         //e.firstElementChild can be used.
        var child = addCourseSelect.lastElementChild; 
        while (child) {
            addCourseSelect.removeChild(child);
            child = addCourseSelect.lastElementChild;
        }
        
         for(var i = 0; i < item.length; i++){
            var currentItem = item[i];
            const option = document.createElement("option");
            option.innerText = currentItem.Acronym;
            option.value = currentItem.Id;
            addCourseSelect.appendChild(option);
        
         }
        
      }, 100);
    })
    
</script>

