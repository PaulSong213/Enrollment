

@model EnrollmentSystem.Models.CoursesModel

@{
    ViewBag.Title = "Courses";
    Layout = "~/Views/Shared/Registrar_Layout.cshtml";
    var courses = ViewBag.Courses;
}


@if (TempData["MessageResult"] != null)
{
    <div class="alert alert-primary">
        @TempData["MessageResult"]
    </div>
}

@if (TempData["ErrorResult"] != null)
{
    <div class="alert alert-danger">
        @TempData["ErrorResult"]
    </div>
}
@Html.ValidationSummary(true, "", new { @class = "text-danger" })
<section class="row pb-5 w-100 overflow-auto">
    <div class="d-flex justify-content-between py-3">
        <h3>@ViewBag.Title</h3>
       <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addCourse" >
            Add Course
       </button>
    </div>
   <div class="w-100 overflow-auto py-3">
         <table id="dataTable" class="table table-striped" style="width:100%">
    </table>
    </div>
</section>

<section>@RenderPage("./Edit.cshtml")</section>
<section>@RenderPage("./Add.cshtml")</section>
<section>@RenderPage("./View.cshtml")</section>


@section scripts{
 <script>
    $(document).ready(function() {
    
        
        var coursesData = '@courses';
        var courses = JSON.parse(coursesData.replace(/&quot;/g,'"'));
        var coursesRaw = JSON.parse(coursesData.replace(/&quot;/g,'"'));
       
    
        for(var i = 0; i < courses.length; i++){
            let course = courses[i];
            courses[i] = Object.keys(course).map((key) => course[key]);
        }
        var courseTable = $('#dataTable').DataTable( {
            responsive: true,
            data: courses,
            columns: [
                { title: "ID" },
                { title: "Acronym" },
                { title: "Name" },
                { title: "Slots" },
                { title: "", "defaultContent": "<button type='button' class='btn btn-success editItem' data-bs-toggle='modal' data-bs-target='#editCourse' data-bs-id='1'> Edit Course </button>" },
                { title: "", "defaultContent": "<button class='deleteitem btn btn-danger'>Delete</button>" }
            ],
            "fnRowCallback": function(nRow, aData, iDisplayIndex) {
              nRow.setAttribute('id',aData[0]);
              nRow.setAttribute('class',"clickableRow");
              nRow.setAttribute('data-bs-toggle',"modal");
              nRow.setAttribute('data-bs-target',"#viewCourse");
              },
            dom: 'Bfrtip',
            buttons: [
                'print','copyHtml5',
            'excelHtml5',
            'pdfHtml5'
            ]
        });
         
        $(".editItem").on('click', function(event){
            let itemId = $(this).closest('tr').attr('id');
            let item = findItemById(itemId);
            
            $(this).attr('data-bs-id',   itemId);
            if(item != null){
                $(this).attr('data-bs-Name',   item.Name);
                $(this).attr('data-bs-Slots',   item.Slots);
                $(this).attr('data-bs-Acronym',   item.Acronym);
            }
        });
    
        $(".clickableRow").on('click', function(event){
            let itemId = $(this).attr('id');
            let item = findItemById(itemId);
            
            $(this).attr('data-bs-id',   itemId);
            if(item != null){
                $(this).attr('data-bs-Name',   item.Name);
                $(this).attr('data-bs-Slots',   item.Slots);
                $(this).attr('data-bs-Acronym',   item.Acronym);
            }
        });
    
        $(".deleteitem").on('click', function(event){
            let itemId = $(this).closest('tr').attr('id');
            location.href = "/Courses/Delete/" + itemId;
        });
    
    
        function findItemById(id){
            for(var i = 0; i < coursesRaw.length; i++){
                let course = coursesRaw[i];
                if(id == course.Id)return course;
                console.log(id, course.Id);
            }
            return null;
        }
    
    } );
    
    
 </script>
}

